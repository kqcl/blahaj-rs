name: Build and Release

on:
  push:
    tags:
      - 'v*' 

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: cargo fetch

      - name: Build release
        run: cargo build --release

      - name: Archive binary
        run: |
          mkdir -p release
          if [[ "$RUNNER_OS" == "Windows" ]]; then 
            cp target/release/my_rust_project.exe release/ 
          else 
            cp target/release/my_rust_project release/ 
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-binaries
          path: release/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: release-binaries

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/my_rust_project
          asset_name: my_rust_project_${{ github.ref_name }}_${{ matrix.platform }}.zip
          asset_content_type: application/zip
